# encoding: utf-8
"""
‰ΩøÁî®PlaywrightËá™Âä®Ëé∑ÂèñÂ∞èÁ∫¢‰π¶Ê∏∏ÂÆ¢cookies
"""

import json
import time
from playwright.sync_api import sync_playwright
from loguru import logger

class XHSCookieGetter:
    def __init__(self, headless: bool = True, timeout: int = 30000):
        """
        ÂàùÂßãÂåñCookieËé∑ÂèñÂô®
        :param headless: ÊòØÂê¶Êó†Â§¥Ê®°Âºè
        :param timeout: Ë∂ÖÊó∂Êó∂Èó¥(ÊØ´Áßí)
        """
        self.headless = headless
        self.timeout = timeout
        
    def get_guest_cookies(self, wait_time: int = 5, retry_count: int = 3):
        """
        Ëé∑ÂèñÂ∞èÁ∫¢‰π¶Ê∏∏ÂÆ¢cookies
        :param wait_time: Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÊó∂Èó¥(Áßí)
        :param retry_count: ÈáçËØïÊ¨°Êï∞
        :return: (success, cookies_str, cookies_dict)
        """
        for attempt in range(retry_count):
            try:
                logger.info(f"üîÑ Á¨¨ {attempt + 1} Ê¨°Â∞ùËØïËé∑Âèñcookies...")
                
                with sync_playwright() as p:
                    # ÂêØÂä®ÊµèËßàÂô®
                    browser = p.chromium.launch(
                        headless=self.headless,
                        args=[
                            '--no-sandbox',
                            '--disable-setuid-sandbox',
                            '--disable-dev-shm-usage',
                            '--disable-accelerated-2d-canvas',
                            '--no-first-run',
                            '--no-zygote',
                            '--disable-gpu'
                        ]
                    )
                    
                    # ÂàõÂª∫‰∏ä‰∏ãÊñá
                    context = browser.new_context(
                        viewport={'width': 1920, 'height': 1080},
                        user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36'
                    )
                    
                    # ÂàõÂª∫È°µÈù¢
                    page = context.new_page()
                    
                    # ËÆæÁΩÆË∂ÖÊó∂
                    page.set_default_timeout(self.timeout)
                    
                    logger.info("üåê Ê≠£Âú®ËÆøÈóÆÂ∞èÁ∫¢‰π¶È¶ñÈ°µ...")
                    
                    # ËÆøÈóÆÂ∞èÁ∫¢‰π¶È¶ñÈ°µ
                    response = page.goto('https://www.xiaohongshu.com', wait_until='networkidle')
                    
                    if response.status != 200:
                        logger.warning(f"‚ö†Ô∏è  È°µÈù¢ÂìçÂ∫îÁä∂ÊÄÅÁ†Å: {response.status}")
                    
                    # Á≠âÂæÖÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ
                    logger.info(f"‚è≥ Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩ {wait_time} Áßí...")
                    time.sleep(wait_time)
                    
                    # Â∞ùËØïÁ≠âÂæÖ‰∏Ä‰∫õÂÖ≥ÈîÆÂÖÉÁ¥†Âä†ËΩΩ
                    try:
                        page.wait_for_selector('body', timeout=10000)
                        logger.info("‚úÖ È°µÈù¢Âü∫Êú¨ÂÖÉÁ¥†Â∑≤Âä†ËΩΩ")
                    except:
                        logger.warning("‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞È°µÈù¢Âü∫Êú¨ÂÖÉÁ¥†ÔºåÁªßÁª≠Â∞ùËØïËé∑Âèñcookies")
                    
                    # Ëé∑Âèñcookies
                    cookies = context.cookies()
                    
                    if not cookies:
                        logger.warning("‚ö†Ô∏è  Êú™Ëé∑ÂèñÂà∞‰ªª‰Ωïcookies")
                        browser.close()
                        continue
                    
                    # ËΩ¨Êç¢cookiesÊ†ºÂºè
                    cookies_dict = {}
                    cookies_list = []
                    
                    for cookie in cookies:
                        cookies_dict[cookie['name']] = cookie['value']
                        cookies_list.append(f"{cookie['name']}={cookie['value']}")
                    
                    cookies_str = "; ".join(cookies_list)
                    
                    # Ê£ÄÊü•ÂÖ≥ÈîÆcookies
                    required_cookies = ['webId', 'xsecappid']
                    missing_cookies = [name for name in required_cookies if name not in cookies_dict]
                    
                    if missing_cookies:
                        logger.warning(f"‚ö†Ô∏è  Áº∫Â∞ëÂÖ≥ÈîÆcookies: {missing_cookies}")
                    
                    logger.info(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(cookies)} ‰∏™cookies")
                    logger.info(f"üìè CookiesÂ≠óÁ¨¶‰∏≤ÈïøÂ∫¶: {len(cookies_str)}")
                    
                    # ÊâìÂç∞‰∏ªË¶ÅcookiesÔºàË∞ÉËØïÁî®Ôºâ
                    main_cookies = ['webId', 'xsecappid', 'webBuild', 'abRequestId']
                    logger.info("üîç ‰∏ªË¶Åcookies:")
                    for name in main_cookies:
                        if name in cookies_dict:
                            value = cookies_dict[name]
                            display_value = value[:20] + "..." if len(value) > 20 else value
                            logger.info(f"   {name}: {display_value}")
                    
                    browser.close()
                    return True, cookies_str, cookies_dict
                    
            except Exception as e:
                logger.error(f"‚ùå Á¨¨ {attempt + 1} Ê¨°Â∞ùËØïÂ§±Ë¥•: {str(e)}")
                if attempt < retry_count - 1:
                    logger.info(f"üîÑ {3} ÁßíÂêéÈáçËØï...")
                    time.sleep(3)
                else:
                    logger.error("‚ùå ÊâÄÊúâÂ∞ùËØïÈÉΩÂ§±Ë¥•‰∫Ü")
        
        return False, "", {}
    
    def get_cookies_with_browser_interaction(self, manual_wait: bool = False):
        """
        Ëé∑ÂèñcookiesÔºàÊîØÊåÅÊâãÂä®ÊµèËßàÂô®‰∫§‰∫íÔºâ
        :param manual_wait: ÊòØÂê¶Á≠âÂæÖÊâãÂä®Êìç‰Ωú
        :return: (success, cookies_str, cookies_dict)
        """
        try:
            logger.info("üñ•Ô∏è  ÂêØÂä®ÂèØËßÜÂåñÊµèËßàÂô®Ëé∑Âèñcookies...")
            
            with sync_playwright() as p:
                # ÂêØÂä®ÂèØËßÜÂåñÊµèËßàÂô®
                browser = p.chromium.launch(
                    headless=False,  # ÊòæÁ§∫ÊµèËßàÂô®
                    args=['--no-sandbox', '--disable-setuid-sandbox']
                )
                
                context = browser.new_context(
                    viewport={'width': 1920, 'height': 1080},
                    user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36'
                )
                
                page = context.new_page()
                
                logger.info("üåê Ê≠£Âú®ÊâìÂºÄÂ∞èÁ∫¢‰π¶È¶ñÈ°µ...")
                page.goto('https://www.xiaohongshu.com')
                
                if manual_wait:
                    logger.info("‚è∏Ô∏è  ÊµèËßàÂô®Â∑≤ÊâìÂºÄÔºå‰Ω†ÂèØ‰ª•ÊâãÂä®Êìç‰ΩúÔºàÂ¶ÇÁôªÂΩïÔºâ")
                    input("ÂÆåÊàêÊìç‰ΩúÂêéÊåâÂõûËΩ¶ÈîÆÁªßÁª≠Ëé∑Âèñcookies...")
                else:
                    logger.info("‚è≥ Á≠âÂæÖÈ°µÈù¢Ëá™Âä®Âä†ËΩΩ...")
                    time.sleep(5)
                
                # Ëé∑Âèñcookies
                cookies = context.cookies()
                cookies_dict = {}
                cookies_list = []
                
                for cookie in cookies:
                    cookies_dict[cookie['name']] = cookie['value']
                    cookies_list.append(f"{cookie['name']}={cookie['value']}")
                
                cookies_str = "; ".join(cookies_list)
                
                logger.info(f"‚úÖ Ëé∑ÂèñÂà∞ {len(cookies)} ‰∏™cookies")
                
                browser.close()
                return True, cookies_str, cookies_dict
                
        except Exception as e:
            logger.error(f"‚ùå ÂèØËßÜÂåñËé∑ÂèñcookiesÂ§±Ë¥•: {str(e)}")
            return False, "", {}
    
    def save_cookies(self, cookies_dict: dict, file_path: str = "auto_cookies.json"):
        """
        ‰øùÂ≠òcookiesÂà∞Êñá‰ª∂
        :param cookies_dict: cookiesÂ≠óÂÖ∏
        :param file_path: ‰øùÂ≠òË∑ØÂæÑ
        """
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(cookies_dict, f, indent=2, ensure_ascii=False)
            logger.info(f"üíæ CookiesÂ∑≤‰øùÂ≠òÂà∞: {file_path}")
            return True
        except Exception as e:
            logger.error(f"‚ùå ‰øùÂ≠òcookiesÂ§±Ë¥•: {str(e)}")
            return False
    
    def load_cookies(self, file_path: str = "auto_cookies.json"):
        """
        ‰ªéÊñá‰ª∂Âä†ËΩΩcookies
        :param file_path: Êñá‰ª∂Ë∑ØÂæÑ
        :return: (success, cookies_str, cookies_dict)
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                cookies_dict = json.load(f)
            
            cookies_list = [f"{k}={v}" for k, v in cookies_dict.items()]
            cookies_str = "; ".join(cookies_list)
            
            logger.info(f"üìÇ ‰ªéÊñá‰ª∂Âä†ËΩΩ‰∫Ü {len(cookies_dict)} ‰∏™cookies")
            return True, cookies_str, cookies_dict
            
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è  Êñá‰ª∂‰∏çÂ≠òÂú®: {file_path}")
            return False, "", {}
        except Exception as e:
            logger.error(f"‚ùå Âä†ËΩΩcookiesÂ§±Ë¥•: {str(e)}")
            return False, "", {}

def test_cookie_getter():
    """
    ÊµãËØïcookieËé∑ÂèñÂäüËÉΩ
    """
    print("üß™ ÊµãËØïPlaywrightËé∑ÂèñcookiesÂäüËÉΩ")
    print("=" * 50)
    
    getter = XHSCookieGetter(headless=True)
    
    # ÊµãËØïËá™Âä®Ëé∑Âèñ
    print("1Ô∏è‚É£  ÊµãËØïËá™Âä®Ëé∑ÂèñÊ∏∏ÂÆ¢cookies...")
    success, cookies_str, cookies_dict = getter.get_guest_cookies()
    
    if success:
        print("‚úÖ Ëá™Âä®Ëé∑ÂèñÊàêÂäü!")
        print(f"üìä Ëé∑ÂèñÂà∞ {len(cookies_dict)} ‰∏™cookies")
        print(f"üìè CookiesÂ≠óÁ¨¶‰∏≤ÈïøÂ∫¶: {len(cookies_str)}")
        
        # ‰øùÂ≠òcookies
        # getter.save_cookies(cookies_dict, "test_cookies.json")
        
        # ÊòæÁ§∫ÈÉ®ÂàÜcookies
        print("\nüîç ÈÉ®ÂàÜcookiesÂÜÖÂÆπ:")
        for i, (name, value) in enumerate(list(cookies_dict.items())[:5]):
            display_value = value[:30] + "..." if len(value) > 30 else value
            print(f"   {name}: {display_value}")
        
        return 200, cookies_str
    else:
        print("‚ùå Ëá™Âä®Ëé∑ÂèñÂ§±Ë¥•")
        return None

if __name__ == "__main__":
    test_cookie_getter()